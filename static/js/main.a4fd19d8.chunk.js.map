{"version":3,"sources":["components/Header.js","hooks/useSelect.js","components/Formulario.js","components/Noticia.js","components/ListadoNoticias.js","App.js","serviceWorker.js","index.js","components/Formulario.module.css"],"names":["Header","titulo","className","href","useSelect","stateInicial","opciones","useState","state","setState","onChange","e","target","value","map","opcion","key","label","Formulario","setCategoria","categoria","SelectNoticias","styles","buscador","onSubmit","preventDefault","heading","type","Noticia","noticia","urlToImage","url","title","description","source","imagen","src","alt","name","rel","ListadoNoticias","noticias","App","setNoticias","useEffect","a","fetch","respuesta","json","articles","buscarNoticiaAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.a4fd19d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav className=\"nav-wrapper light-blue darken-3 s12 m12 l12\">\r\n            <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, { useState } from \"react\";\r\n\r\nconst useSelect = (stateInicial, opciones) => {\r\n  // State del custom hook\r\n  const [state, setState] = useState(stateInicial);\r\n\r\n  const SelectNoticias = () => (\r\n    <select\r\n      className=\"browser-default\"\r\n      onChange={(e) => setState(e.target.value)}\r\n      value={state}\r\n    >\r\n      {opciones.map((opcion) => (\r\n        <option key={opcion.value} value={opcion.value}>\r\n          {opcion.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n\r\n  return [state, SelectNoticias];\r\n};\r\n\r\nexport default useSelect;\r\n","import React from 'react';\r\nimport styles from './Formulario.module.css';\r\nimport useSelect from '../hooks/useSelect';\r\n\r\nconst Formulario = ({setCategoria}) => {\r\n\r\n    const OPCIONES = [\r\n        {value: 'general', label:'General'},\r\n        {value: 'technology', label:'Tecnología'},\r\n        {value: 'sports', label:'Deportes'},\r\n        {value: 'health', label:'Salud'},\r\n        {value: 'business', label:'Negocios'}\r\n    ]\r\n\r\n    // utilizar custom hooks\r\n    const [ categoria, SelectNoticias ] = useSelect('general',OPCIONES);\r\n\r\n    // Funcion de submit para pasar el state a App.js\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setCategoria(categoria);\r\n    }\r\n\r\n    return ( \r\n        <div className={`${styles.buscador} row`}>\r\n            <div className=\"col s12 m8 offset-m2\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <h2 className={styles.heading}>Encuentra noticias por categoría</h2>\r\n                    <SelectNoticias />\r\n                    <div className=\"input-field col s12\">\r\n                        <input\r\n                            type=\"submit\"\r\n                            className={`${styles['btn-block']} btn-large amber darken-2`}\r\n                            value=\"Buscar\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from \"react\";\r\n\r\nconst Noticia = ({ noticia }) => {\r\n  // Extraer los datos\r\n\r\n  const { urlToImage, url, title, description, source } = noticia;\r\n\r\n  // revisar que venga un imagen\r\n\r\n  const imagen = urlToImage ? (\r\n    <div className=\"card-image\">\r\n      <img src={urlToImage} alt={title} />\r\n      <span className=\"card-title\">{source.name}</span>\r\n    </div>\r\n  ) : null;\r\n  return (\r\n    <div className=\"col s12 m6 l4\">\r\n      <div className=\"card\">\r\n        {imagen}\r\n        <div className=\"card-content\">\r\n          <h3>{title}</h3>\r\n          <p>{description}</p>\r\n        </div>\r\n        <div className=\"card-action\">\r\n          <a\r\n            href={url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"waves-effect waves-light btn\"\r\n          >\r\n            Ver noticia completa\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Noticia;\r\n","import React from 'react';\r\nimport Noticia from './Noticia';\r\n\r\nconst ListadoNoticias = ({noticias}) => (\r\n    <div className=\"row \">\r\n        {noticias.map(noticia=>(\r\n            <Noticia key={noticia.url} noticia={noticia}/>\r\n        ))}\r\n    </div>\r\n);\r\n \r\nexport default ListadoNoticias;","import React, {Fragment, useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListadoNoticias from './components/ListadoNoticias';\n\nfunction App() {\n  \n\n  const [categoria, setCategoria] = useState('');\n\n  const [noticias, setNoticias] = useState([]);\n\n  useEffect(()=>{\n\n    const buscarNoticiaAPI = async () =>{\n        const url = `https://newsapi.org/v2/top-headlines?category=${categoria}&country=co&apiKey=176cef8317e94f059318b3ee7e643ac6`;\n        const respuesta = await fetch(url);\n        const noticias = await respuesta.json();\n        setNoticias(noticias.articles);\n    }\n\n    buscarNoticiaAPI();\n  },[categoria]);\n  return (\n    <Fragment>\n      <Header titulo='Noticias' />\n      <div className=\"container white s12\">\n        <Formulario setCategoria={setCategoria} />\n        <ListadoNoticias noticias={noticias} />\n      </div>\n\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Formulario_heading__2Uh5B\",\"buscador\":\"Formulario_buscador__2yER3\",\"btn-block\":\"Formulario_btn-block__3rlJs\"};"],"sourceRoot":""}